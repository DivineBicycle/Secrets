@page "/managesecret"
@using System.Net
@using Secrets.Web.Models
@inject HttpClient HttpClient

<PageTitle>Manage a Secret</PageTitle>
<form>
    <h2>Manage a Secret</h2>
    <h3>Fetch a Secret</h3>
    <h5>Use your passphrase</h5>
    <div class="form-group">
        <label for="fetchPassphraseInput">Passphrase</label>
        <input type="text" class="form-control" id="fetchPassphraseInput" aria-describedby="fetchPassphraseHelp" placeholder="cat-computer-programming" @bind="CurrentFetchPassphrase" @oninput="e => CurrentFetchPassphrase = (string) e.Value!"/>
        <small id="fetchPassphraseHelp" class="form-text text-muted">Enter your passphrase</small>
    </div>
    <button type="button" class="btn btn-primary mb-2" @onclick="FetchWithPassphrase">Fetch!</button>
    <h5>Use your backup information</h5>
    <div class="form-group">
        <label for="dateInput">Birth Date</label>
        <input type="date" class="form-control" id="dateInput" aria-describedby="dateHelp" @oninput="e => BirthDate = e.Value!"/>
        <small id="dateHelp" class="form-label text-muted">Enter the date that you set as your backup date</small>
    </div>
    <div class="form-group">
        <label for="letterInput">Favourite Letter</label>
        <input type="text" class="form-control" id="letterInput" aria-describedby="letterHelp" @bind="FavouriteLetter" @oninput="e => FavouriteLetter = (string) e.Value!"/>
        <small id="letterHelp" class="form-text text-muted">Enter your favourite letter</small>
    </div>
    <div class="form-group">
        <label for="numberInput">Favourite Digit</label>
        <input type="number" step="1" min="0" max="9" class="form-control" id="numberInput" aria-describedby="numberHelp" @bind="FavouriteDigit" @oninput="e => {string? _temp = (string?) e.Value!; if (!string.IsNullOrEmpty(_temp)) { FavouriteDigit = short.Parse(_temp); }}"/>
        <small id="numberHelp" class="form-text text-muted">Enter your favourite digit</small>
    </div>
    <div class="form-group">
        <label class="form-text @FetchOutputTextType" hidden="@_hideSecret">@FetchOutputText</label>
        <br>
        <button type="button" class="btn btn-primary mb-2" @onclick="FetchWithBackup">Fetch!</button>
    </div>
    <h3>Delete a Secret</h3>
    <div class="form-group">
        <label for="deletePassphraseInput">Passphrase</label>
        <input type="text" class="form-control" id="deletePassphraseInput" aria-describedby="deletePassphraseHelp" placeholder="computer-chicken-game" @bind="CurrentDeletePassphrase" @oninput="e => CurrentDeletePassphrase = (string) e.Value!"/>
        <small id="deletePassphraseHelp" class="form-text text-muted">Enter your passphrase</small>
    </div>
    <div class="form-group">
        <label class="form-text @DeleteOutputTextType" hidden="@_hideDeleteText">@DeleteOutputText</label>
        <br>
        <button class="btn btn-danger mb-2" type="button" @onclick="DeleteSecret">Delete!</button>
    </div>
    
</form>


@code {
    private string CurrentFetchPassphrase { get; set; } = null!;
    private string CurrentDeletePassphrase { get; set; } = null!;
    private object BirthDate { get; set; } = null!;
    private string FavouriteLetter { get; set; } = null!;
    private short FavouriteDigit { get; set; }
    
    private bool _hideSecret = true;
    private bool _hideDeleteText = true;
    
    private string FetchOutputText { get; set; } = null!;
    private string FetchOutputTextType { get; set; } = "text-primary";
    
    private string DeleteOutputText { get; set; } = null!;
    private string DeleteOutputTextType { get; set; } = "text-primary";
    private string Secret { get; set; } = null!;

    private async Task FetchWithPassphrase()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7151/secrets/passphrase/{CurrentFetchPassphrase}");
        await HandleResponse(_response, true);
    }

    private async Task FetchWithBackup()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7151/secrets/backup-data/{BirthDate}/{FavouriteDigit}/{FavouriteLetter}");
        await HandleResponse(_response, false);
    }

    private async Task HandleResponse(HttpResponseMessage response, bool usingPassphrase)
    {
        _hideSecret = false;
        if (!response.IsSuccessStatusCode)
        {
            FetchOutputText = usingPassphrase 
                ? "That is not a valid passphrase, if you have forgotten your passphrase please use the recovery method." 
                : "That is not a valid set of backup information, please check that you entered everything correctly.";
            
            FetchOutputTextType = "text-danger";
            return;
        }

        SecretRecord _record = (await response.Content.ReadFromJsonAsync<SecretRecord>())!;
        Secret = _record.Secret;
        FetchOutputText = !usingPassphrase 
            ? $"This is your Secret: {Secret}. Your passphrase is {_record.Passphrase}" 
            : $"This is your Secret: {Secret}";
    }

    private async Task DeleteSecret()
    {
        HttpResponseMessage _response = await HttpClient.DeleteAsync($"https://localhost:7151/secrets/{CurrentDeletePassphrase}");
        if (_response.StatusCode == HttpStatusCode.NotFound)
        {
            DeleteOutputText = "Your Secret has been deleted";
        }
        else
        {
            DeleteOutputText = "Something has gone wrong";
            DeleteOutputTextType = "text-danger";
        }
        _hideDeleteText = false;

    }

}