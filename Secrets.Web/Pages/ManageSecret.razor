@page "/managesecret"
@using System.Net
@using Secrets.Web.Models
@inject HttpClient HttpClient

<PageTitle>Manage a Secret</PageTitle>

<h3>Manage a Secret</h3>
<h4> Fetch a Secret</h4>
Enter your passphrase here:
<input type="text" @bind="CurrentFetchPassphrase" @oninput="e => CurrentFetchPassphrase = (string) e.Value!" placeholder="cat-computer-programming" class="text-input"/>
<br>
<button class="btn btn-primary" @onclick="FetchWithPassphrase">Fetch!</button>
<br>

Enter some info you can use in case you forget your passphrase: <br>
Please enter your birthdate: 
<input type="date" @oninput="e => BirthDate = e.Value!"/>
<br>
Please enter your favourite letter:
<input type="text" @bind="FavouriteLetter" @oninput="e => FavouriteLetter = (string) e.Value!"/>
<br>
Please enter your favourite digit:
<input type="number" step="1" min="0" max="9" @bind="FavouriteDigit" @oninput="e => { string? _temp = (string? ) e.Value!; if (!string.IsNullOrEmpty(_temp)) { FavouriteDigit = short.Parse(_temp);}}"/>
<br>
<button class="btn btn-primary" @onclick="FetchWithBackup">Fetch!</button>
<br>
<p hidden="@_hideSecret">@FetchOutputText</p>
<br>
<h4>Delete a Secret</h4>
<br>
<input type="text" @bind="CurrentDeletePassphrase" @oninput="e => CurrentDeletePassphrase = (string) e.Value!" placeholder="cat-computer-programming" class="text-input"/>
<br>
<button class="btn btn-danger" @onclick="DeleteSecret">Delete!</button>
<br>
<p hidden="@_hideDeleteText">@DeleteOutputText</p>

@code {
    private string CurrentFetchPassphrase { get; set; } = null!;
    private string CurrentDeletePassphrase { get; set; } = null!;
    private object BirthDate { get; set; } = null!;
    private string FavouriteLetter { get; set; } = null!;
    private short FavouriteDigit { get; set; }
    
    private bool _hideSecret = true;
    private bool _hideDeleteText = true;
    private string FetchOutputText { get; set; } = null!;
    private string DeleteOutputText { get; set; } = null!;
    private string Secret { get; set; } = null!;

    private async Task FetchWithPassphrase()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7151/secrets/passphrase/{CurrentFetchPassphrase}");
        await HandleResponse(_response, true);
    }

    private async Task FetchWithBackup()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7151/secrets/backup-data/{BirthDate}/{FavouriteDigit}/{FavouriteLetter}");
        await HandleResponse(_response, false);
    }

    private async Task HandleResponse(HttpResponseMessage response, bool usingPassphrase)
    {
        _hideSecret = false;
        switch (response.IsSuccessStatusCode)
        {
            case false when usingPassphrase:
                FetchOutputText = "That is not a valid passphrase, if you have forgotten your passphrase please use the recovery method.";
                return;
            case false when !usingPassphrase:
                FetchOutputText = "That is not a valid set of backup information, please check that you entered everything correctly.";
                return;
        }

        SecretRecord _record = ((await response.Content.ReadFromJsonAsync<SecretRecord>())!);
        Secret = _record.Secret;
        FetchOutputText = !usingPassphrase 
            ? $"This is your Secret: {Secret}. Your passphrase is {_record.Passphrase}" 
            : $"This is your Secret: {Secret}";
    }

    private async Task DeleteSecret()
    {
        HttpResponseMessage _response = await HttpClient.DeleteAsync($"https://localhost:7151/secrets/{CurrentDeletePassphrase}");
        if (_response.StatusCode == HttpStatusCode.NotFound)
        {
            DeleteOutputText = "Your Secret has been deleted";
            _hideDeleteText = false;
        }

    }

}