@page "/fetchsecret"
@using System.Net
@using Secrets.Web.Models
@inject HttpClient HttpClient

<h3>Fetch a secret</h3>

Enter your passphrase here:
<input type="text" @bind="CurrentPassphrase" @oninput="e => CurrentPassphrase = (string) e.Value!" placeholder="cat-computer-programming" minlength="500"/>
<br>
<button class="btn btn-primary" @onclick="FetchWithPassphrase">Fetch!</button>
<br>

Enter some info you can use in case you forget your passphrase: <br>
Please enter your birthdate: 
<input type="date" @oninput="e => BirthDate = e.Value"/>
<br>
Please enter your favouriteletter:
<input type="text" @bind="FavouriteLetter" @oninput="e => FavouriteLetter = (string) e.Value!"/>
<br>
Please enter your favourite digit:
<input type="number" step="1" min="0" max="9" @bind="FavouriteDigit" @oninput="e => { string _temp = (string) e.Value!; FavouriteDigit = int.Parse(_temp);}"/>
<br>
<button class="btn btn-primary" @onclick="FetchWithBackup">Fetch!</button>
<br>
<p hidden="@HideSecret">@OutputText</p>
@code {
    private string? CurrentPassphrase { get; set; }
    private object? BirthDate { get; set; }
    private string? FavouriteLetter { get; set; }
    private int FavouriteDigit { get; set; }
    private bool HideSecret = true;
    
    private string OutputText { get; set; } = null!;
    private string Secret { get; set; } = null!;

    private async Task FetchWithPassphrase()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7142/secrets/passphrase/{CurrentPassphrase}");
        await HandleResponse(_response, true);
    }

    private async Task FetchWithPassphrase()
    {
        HttpResponseMessage _response = await HttpClient.GetAsync($"https://localhost:7142/secrets/backup-data/{BirthDate}/{FavouriteDigit}/{FavouriteLetter}");
        await HandleResponse(_response, true);
    }

    private async Task HandleResponse(HttpResponseMessage response, bool usingPassphrase)
    {
        HideSecret = false;
        switch (response.IsSuccessStatusCode)
        {
            case false when usingPassphrase:
                OutputText = "That is not a valid passphrase, if you have forgotten your passphrase please use the recovery method.";
                return;
            case false when !usingPassphrase:
                OutputText = "That is not a valid set of backup information, please check that you entered everything correctly.";
                return;
        }

        SecretRecord _record = ((await response.Content.ReadFromJsonAsync<SecretRecord>())!);
        Secret = _record.Secret;
        OutputText = $"This is your secret: {Secret}";
    }

}